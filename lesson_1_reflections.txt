How did viewing a diff between two versions of a file help you see the bug that was introduced ? 
The miss spell was easy to locate and correct. 
How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
You can view any changes that were made. You can effortlessly go back to an older version.
You can quickly compair changes and track progress on a file. 
What do you think are the pros and cons of manually choosing when to create a commit like you do in Git, vs having versions automatically saves, like google docs does ? 
Pros - Logical commits will be saved according to a logical change in the code. Each commit will have a significant easy to udnerstand meaning. 
Cons - Having to manually save is pron to errors and forgetfulness.
Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
The purpose of Git is for coding, while GDocs is for simple files. While coding dependencies matter. The purpose of each file is different.
How can you use the commands git log and git diff to view the history of files?
Git log will show you the ID's of each commit so yo ucan quickly identify the commit yo uare looking for. 
Git diff will show you the changes between the commit to its previous. 
How might using version control make you more confident to make changes that could break something?
You can quickly revert to back version and find the change which caused the issue. That is without 
Now that you have your workspace set up, what do you want to try using Git for?
updating and changing code while committing versions. 
What happens when you initialize a repository? Why do you need to do it?
An hidden file .git is created in the repository in order to have other files added to it to be tracked. 